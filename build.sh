#!/bin/bash
# Build script para Render

echo "üöÄ Iniciando build de TrueSign..."
echo "üìÇ Current directory: $(pwd)"
echo "üìÇ Git directory: $(git rev-parse --show-toplevel 2>/dev/null || echo 'No git')"

# Instalar Git LFS y dependencias del sistema
echo "üì• Instalando Git LFS y Chromium..."
apt-get update -qq
apt-get install -y -qq git-lfs chromium-browser chromium-chromedriver xvfb

echo "‚úÖ Dependencias del sistema instaladas"

# Inicializar Git LFS
echo "üîÑ Inicializando Git LFS..."
git lfs install

# Verificar que Git LFS est√° funcionando
echo "üîç Verificando estado de Git LFS..."
git lfs env

# Descargar archivos LFS
echo "‚¨áÔ∏è Descargando archivos LFS (.pkl)..."
echo "üîÑ Ejecutando: git lfs fetch --all"
git lfs fetch --all

echo "üîÑ Ejecutando: git lfs pull"
git lfs pull

# Tambi√©n intentar checkout manual
echo "üîÑ Ejecutando: git lfs checkout"
git lfs checkout

# Verificar archivos espec√≠ficos
echo "üîç Verificando archivos LFS..."
git lfs ls-files

# Forzar checkout de archivos espec√≠ficos
echo "üì• Forzando descarga de modelos grandes..."
if [ -f "models/trained/maximum_price_model.pkl" ]; then
    echo "‚úÖ maximum_price_model.pkl presente"
else
    echo "‚ö†Ô∏è maximum_price_model.pkl faltante, intentando descargar..."
    git lfs pull --include="models/trained/maximum_price_model.pkl" || echo "‚ùå No se pudo descargar"
fi

if [ -f "models/trained/value_change_model.pkl" ]; then
    echo "‚úÖ value_change_model.pkl presente"  
else
    echo "‚ö†Ô∏è value_change_model.pkl faltante, intentando descargar..."
    git lfs pull --include="models/trained/value_change_model.pkl" || echo "‚ùå No se pudo descargar"
fi

# Listar archivos descargados
echo "üìã Archivos en models/trained despu√©s de git lfs checkout:"
ls -la models/trained/ || echo "‚ö†Ô∏è models/trained no existe todav√≠a"

# Instalar dependencias de Python PRIMERO
echo "üì¶ Instalando dependencias de Python..."
pip install -r requirements.txt

# Verificar si los modelos grandes est√°n presentes
echo "üîç Verificando si los modelos grandes est√°n presentes..."
if [ ! -f "models/trained/value_change_model.pkl" ] || [ ! -s "models/trained/value_change_model.pkl" ]; then
    echo "‚ö†Ô∏è value_change_model.pkl no encontrado, intentando extraer de archivo comprimido..."
    
    # Intentar descargar desde archivo comprimido si existe
    if [ -f "data/models_compressed.tar.gz.partaa" ]; then
        echo "üì¶ Juntando partes del archivo comprimido..."
        cat data/models_compressed.tar.gz.part* > data/models_compressed.tar.gz
        echo "üì¶ Extrayendo modelos desde archivo comprimido..."
        tar -xzf data/models_compressed.tar.gz -C models/trained/
        echo "‚úÖ Modelos extra√≠dos"
    fi
    
    # Si a√∫n no est√°n, intentar LFS
    if [ ! -f "models/trained/value_change_model.pkl" ] || [ ! -s "models/trained/value_change_model.pkl" ]; then
        echo "‚ö†Ô∏è Reintentando descarga desde Git LFS..."
        git lfs pull --include="models/trained/value_change_model.pkl" || true
    fi
fi

if [ ! -f "models/trained/maximum_price_model.pkl" ] || [ ! -s "models/trained/maximum_price_model.pkl" ]; then
    echo "‚ö†Ô∏è maximum_price_model.pkl no encontrado, intentando extraer de archivo comprimido..."
    
    if [ -f "data/models_compressed.tar.gz.partaa" ]; then
        echo "üì¶ Juntando partes del archivo comprimido..."
        cat data/models_compressed.tar.gz.part* > data/models_compressed.tar.gz
        echo "üì¶ Extrayendo modelos desde archivo comprimido..."
        tar -xzf data/models_compressed.tar.gz -C models/trained/
        echo "‚úÖ Modelos extra√≠dos"
    fi
    
    if [ ! -f "models/trained/maximum_price_model.pkl" ] || [ ! -s "models/trained/maximum_price_model.pkl" ]; then
        echo "‚ö†Ô∏è Reintentando descarga desde Git LFS..."
        git lfs pull --include="models/trained/maximum_price_model.pkl" || true
    fi
fi

# Verificar que los modelos est√©n presentes
echo "üìä Verificando modelos entrenados..."
if [ -d "models/trained" ]; then
    echo "‚úÖ Directorio models/trained existe"
    ls -lah models/trained/
    echo "üìã Total archivos .pkl: $(find models/trained -name '*.pkl' | wc -l)"
    
    # Verificar archivos cr√≠ticos
    if [ ! -f "models/trained/value_change_model.pkl" ]; then
        echo "‚ùå ERROR CR√çTICO: value_change_model.pkl faltante"
        echo "üîÑ Intentando verificaci√≥n adicional de Git LFS..."
        git lfs pull --include="models/trained/value_change_model.pkl"
        git lfs checkout models/trained/value_change_model.pkl
    fi
    
    if [ ! -f "models/trained/maximum_price_model.pkl" ]; then
        echo "‚ùå ERROR CR√çTICO: maximum_price_model.pkl faltante"
        echo "üîÑ Intentando verificaci√≥n adicional de Git LFS..."
        git lfs pull --include="models/trained/maximum_price_model.pkl"
        git lfs checkout models/trained/maximum_price_model.pkl
    fi
    
    # Verificar tama√±o de archivos (no deben ser solo pointers)
    if [ -f "models/trained/value_change_model.pkl" ]; then
        SIZE=$(stat -f%z models/trained/value_change_model.pkl 2>/dev/null || stat -c%s models/trained/value_change_model.pkl 2>/dev/null || echo "0")
        if [ "$SIZE" -lt 1000000 ]; then
            echo "‚ö†Ô∏è WARNING: value_change_model.pkl parece ser un pointer de LFS en lugar del archivo real"
            echo "   Tama√±o: $SIZE bytes"
        else
            echo "‚úÖ value_change_model.pkl tiene tama√±o correcto: $SIZE bytes"
        fi
    fi
    
    if [ -f "models/trained/maximum_price_model.pkl" ]; then
        SIZE=$(stat -f%z models/trained/maximum_price_model.pkl 2>/dev/null || stat -c%s models/trained/maximum_price_model.pkl 2>/dev/null || echo "0")
        if [ "$SIZE" -lt 10000000 ]; then
            echo "‚ö†Ô∏è WARNING: maximum_price_model.pkl parece ser un pointer de LFS en lugar del archivo real"
            echo "   Tama√±o: $SIZE bytes"
        else
            echo "‚úÖ maximum_price_model.pkl tiene tama√±o correcto: $SIZE bytes"
        fi
    fi
    
else
    echo "‚ùå ERROR: Directorio models/trained no existe"
    exit 1
fi

# Verificar que el archivo principal existe
if [ ! -f "app/run.py" ]; then
    echo "‚ùå Error: app/run.py no encontrado"
    exit 1
fi

echo "‚úÖ Build completado exitosamente"
